# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Deployment'

on:
  pull_request:
    branches:
      - main  # QA & Prod only run on PR

jobs:
  terraform-dev:
    name: 'Terraform Dev'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables (dev)
        run: |
          echo '${{ secrets.AZURE_AD_SECRETS }}' > azure_creds.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId azure_creds.json)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (dev)
        working-directory: dev
        run: terraform init
          
      - name: Terraform Validate (dev)
        working-directory: dev
        run: terraform validate
          
      - name: Terraform Plan (dev)
        working-directory: dev
        run: terraform plan -var-file="terraform.tfvars" -input=false
          
      - name: Terraform Apply (dev)
        working-directory: dev
        run: terraform apply -var-file="terraform.tfvars" -auto-approve -input=false

  terraform-qa:
    name: 'Terraform QA'
    runs-on: ubuntu-latest
    environment: qa
    needs: terraform-dev  # Runs after dev completes
    if: github.event_name == 'pull_request'  # Runs only on PR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables (qa)
        run: |
          echo '${{ secrets.AZURE_AD_SECRETS }}' > azure_creds.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId azure_creds.json)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (qa)
        working-directory: qa
        run: terraform init
          
      - name: Terraform Validate (qa)
        working-directory: qa
        run: terraform validate
          
      - name: Terraform Plan (qa)
        working-directory: qa
        run: terraform plan -var-file="terraform.tfvars" -input=false
          
      - name: Terraform Apply (qa)
        working-directory: qa
        run: terraform apply -var-file="terraform.tfvars" -auto-approve -input=false

  terraform-prod:
    name: 'Terraform Prod'
    runs-on: ubuntu-latest
    environment: prod
    needs: terraform-qa  # Runs after QA completes
    if: github.event_name == 'pull_request'  # Runs only on PR

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Terraform Environment Variables (prod)
        run: |
          echo '${{ secrets.AZURE_AD_SECRETS }}' > azure_creds.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure_creds.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId azure_creds.json)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init (prod)
        working-directory: prod
        run: terraform init
          
      - name: Terraform Validate (prod)
        working-directory: prod
        run: terraform validate
          
      - name: Terraform Plan (prod)
        working-directory: prod
        run: terraform plan -var-file="terraform.tfvars" -input=false
          
      - name: Manual Approval for Prod
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform Apply (prod)
        working-directory: prod
        run: terraform apply -var-file="terraform.tfvars" -auto-approve -input=false


permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [dev, qa, prod]  # Runs for all environments in parallel

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Set Terraform Environment Variables for Azure Authentication
    - name: Set Terraform Environment Variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_AD_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      working-directory: ${{ matrix.env }}
      run: terraform init
      continue-on-error: true  # Ignore any errors during initialization

    - name: Terraform Validate
      working-directory: ${{ matrix.env }}
      run: terraform validate
      continue-on-error: true  # Ignore any errors during validation

    - name: Terraform Plan
      working-directory: ${{ matrix.env }}
      run: terraform plan -var-file="terraform.tfvars" -input=false
      continue-on-error: true  # Ignore any errors during planning

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      working-directory: ${{ matrix.env }}
      run: terraform apply -var-file="terraform.tfvars" -auto-approve -input=false
      continue-on-error: true  # Ignore any errors during applying
